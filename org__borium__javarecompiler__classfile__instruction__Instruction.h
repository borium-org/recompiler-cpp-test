#pragma once

#include "java__lang__Object.h"

namespace java::lang
{
	class Class;
	class ClassFormatError;
	class Object;
	class String;
}

namespace org::borium::javarecompiler
{
	class Statics;
}

namespace org::borium::javarecompiler::classfile
{
	class ByteInputStream;
	class IndentedOutputStream;
}

namespace org::borium::javarecompiler::classfile::constants
{
	class ConstantPool;
}

namespace org::borium::javarecompiler::classfile::instruction
{
	class InstructionAALOAD;
	class InstructionAASTORE;
	class InstructionACONST_NULL;
	class InstructionALOAD;
	class InstructionANEWARRAY;
	class InstructionARETURN;
	class InstructionARRAYLENGTH;
	class InstructionASTORE;
	class InstructionATHROW;
	class InstructionBALOAD;
	class InstructionBASTORE;
	class InstructionBIPUSH;
	class InstructionCALOAD;
	class InstructionCASTORE;
	class InstructionCHECKCAST;
	class InstructionD2F;
	class InstructionD2I;
	class InstructionD2L;
	class InstructionDADD;
	class InstructionDALOAD;
	class InstructionDASTORE;
	class InstructionDCMPG;
	class InstructionDCMPL;
	class InstructionDCONST;
	class InstructionDDIV;
	class InstructionDLOAD;
	class InstructionDMUL;
	class InstructionDNEG;
	class InstructionDREM;
	class InstructionDRETURN;
	class InstructionDSTORE;
	class InstructionDSUB;
	class InstructionDUP;
	class InstructionDUP2;
	class InstructionDUP2_X1;
	class InstructionDUP2_X2;
	class InstructionDUP_X1;
	class InstructionDUP_X2;
	class InstructionF2D;
	class InstructionF2I;
	class InstructionF2L;
	class InstructionFADD;
	class InstructionFALOAD;
	class InstructionFASTORE;
	class InstructionFCMPG;
	class InstructionFCMPL;
	class InstructionFCONST;
	class InstructionFDIV;
	class InstructionFLOAD;
	class InstructionFMUL;
	class InstructionFNEG;
	class InstructionFREM;
	class InstructionFRETURN;
	class InstructionFSTORE;
	class InstructionFSUB;
	class InstructionGETFIELD;
	class InstructionGETSTATIC;
	class InstructionGOTO;
	class InstructionGOTO_W;
	class InstructionI2B;
	class InstructionI2C;
	class InstructionI2D;
	class InstructionI2F;
	class InstructionI2L;
	class InstructionI2S;
	class InstructionIADD;
	class InstructionIALOAD;
	class InstructionIAND;
	class InstructionIASTORE;
	class InstructionICONST;
	class InstructionIDIV;
	class InstructionIFEQ;
	class InstructionIFGE;
	class InstructionIFGT;
	class InstructionIFLE;
	class InstructionIFLT;
	class InstructionIFNE;
	class InstructionIFNONNULL;
	class InstructionIFNULL;
	class InstructionIF_ACMPEQ;
	class InstructionIF_ACMPNE;
	class InstructionIF_ICMPEQ;
	class InstructionIF_ICMPGE;
	class InstructionIF_ICMPGT;
	class InstructionIF_ICMPLE;
	class InstructionIF_ICMPLT;
	class InstructionIF_ICMPNE;
	class InstructionIINC;
	class InstructionILOAD;
	class InstructionIMUL;
	class InstructionINEG;
	class InstructionINSTANCEOF;
	class InstructionINVOKEDYNAMIC;
	class InstructionINVOKEINTERFACE;
	class InstructionINVOKESPECIAL;
	class InstructionINVOKESTATIC;
	class InstructionINVOKEVIRTUAL;
	class InstructionIOR;
	class InstructionIREM;
	class InstructionIRETURN;
	class InstructionISHL;
	class InstructionISHR;
	class InstructionISTORE;
	class InstructionISUB;
	class InstructionIUSHR;
	class InstructionIXOR;
	class InstructionJSR;
	class InstructionJSR_W;
	class InstructionL2D;
	class InstructionL2F;
	class InstructionL2I;
	class InstructionLADD;
	class InstructionLALOAD;
	class InstructionLAND;
	class InstructionLASTORE;
	class InstructionLCMP;
	class InstructionLCONST;
	class InstructionLDC;
	class InstructionLDC2_W;
	class InstructionLDC_W;
	class InstructionLDIV;
	class InstructionLLOAD;
	class InstructionLMUL;
	class InstructionLNEG;
	class InstructionLOOKUPSWITCH;
	class InstructionLOR;
	class InstructionLREM;
	class InstructionLRETURN;
	class InstructionLSHL;
	class InstructionLSHR;
	class InstructionLSTORE;
	class InstructionLSUB;
	class InstructionLUSHR;
	class InstructionLXOR;
	class InstructionMONITORENTER;
	class InstructionMONITOREXIT;
	class InstructionMULTIANEWARRAY;
	class InstructionNEW;
	class InstructionNEWARRAY;
	class InstructionNOP;
	class InstructionPOP;
	class InstructionPOP2;
	class InstructionPUTFIELD;
	class InstructionPUTSTATIC;
	class InstructionRET;
	class InstructionRETURN;
	class InstructionSALOAD;
	class InstructionSASTORE;
	class InstructionSIPUSH;
	class InstructionSWAP;
	class InstructionTABLESWITCH;
	class InstructionWIDE;
}

using namespace java::lang;
using namespace org::borium::javarecompiler;
using namespace org::borium::javarecompiler::classfile;
using namespace org::borium::javarecompiler::classfile::constants;
using namespace org::borium::javarecompiler::classfile::instruction;

namespace org::borium::javarecompiler::classfile::instruction
{

	class Instruction : public Object
	{
	public:
		static Pointer<Class> __thisClassStatic;

	public:
		static int NOP;
		static int ACONST_NULL;
		static int ICONST_M1;
		static int ICONST_0;
		static int ICONST_1;
		static int ICONST_2;
		static int ICONST_3;
		static int ICONST_4;
		static int ICONST_5;
		static int LCONST_0;
		static int LCONST_1;
		static int FCONST_0;
		static int FCONST_1;
		static int FCONST_2;
		static int DCONST_0;
		static int DCONST_1;
		static int BIPUSH;
		static int SIPUSH;
		static int LDC;
		static int LDC_W;
		static int LDC2_W;
		static int ILOAD;
		static int LLOAD;
		static int FLOAD;
		static int DLOAD;
		static int ALOAD;
		static int ILOAD_0;
		static int ILOAD_1;
		static int ILOAD_2;
		static int ILOAD_3;
		static int LLOAD_0;
		static int LLOAD_1;
		static int LLOAD_2;
		static int LLOAD_3;
		static int FLOAD_0;
		static int FLOAD_1;
		static int FLOAD_2;
		static int FLOAD_3;
		static int DLOAD_0;
		static int DLOAD_1;
		static int DLOAD_2;
		static int DLOAD_3;
		static int ALOAD_0;
		static int ALOAD_1;
		static int ALOAD_2;
		static int ALOAD_3;
		static int IALOAD;
		static int LALOAD;
		static int FALOAD;
		static int DALOAD;
		static int AALOAD;
		static int BALOAD;
		static int CALOAD;
		static int SALOAD;
		static int ISTORE;
		static int LSTORE;
		static int FSTORE;
		static int DSTORE;
		static int ASTORE;
		static int ISTORE_0;
		static int ISTORE_1;
		static int ISTORE_2;
		static int ISTORE_3;
		static int LSTORE_0;
		static int LSTORE_1;
		static int LSTORE_2;
		static int LSTORE_3;
		static int FSTORE_0;
		static int FSTORE_1;
		static int FSTORE_2;
		static int FSTORE_3;
		static int DSTORE_0;
		static int DSTORE_1;
		static int DSTORE_2;
		static int DSTORE_3;
		static int ASTORE_0;
		static int ASTORE_1;
		static int ASTORE_2;
		static int ASTORE_3;
		static int IASTORE;
		static int LASTORE;
		static int FASTORE;
		static int DASTORE;
		static int AASTORE;
		static int BASTORE;
		static int CASTORE;
		static int SASTORE;
		static int POP;
		static int POP2;
		static int DUP;
		static int DUP_X1;
		static int DUP_X2;
		static int DUP2;
		static int DUP2_X1;
		static int DUP2_X2;
		static int SWAP;
		static int IADD;
		static int LADD;
		static int FADD;
		static int DADD;
		static int ISUB;
		static int LSUB;
		static int FSUB;
		static int DSUB;
		static int IMUL;
		static int LMUL;
		static int FMUL;
		static int DMUL;
		static int IDIV;
		static int LDIV;
		static int FDIV;
		static int DDIV;
		static int IREM;
		static int LREM;
		static int FREM;
		static int DREM;
		static int INEG;
		static int LNEG;
		static int FNEG;
		static int DNEG;
		static int ISHL;
		static int LSHL;
		static int ISHR;
		static int LSHR;
		static int IUSHR;
		static int LUSHR;
		static int IAND;
		static int LAND;
		static int IOR;
		static int LOR;
		static int IXOR;
		static int LXOR;
		static int IINC;
		static int I2L;
		static int I2F;
		static int I2D;
		static int L2I;
		static int L2F;
		static int L2D;
		static int F2I;
		static int F2L;
		static int F2D;
		static int D2I;
		static int D2L;
		static int D2F;
		static int I2B;
		static int I2C;
		static int I2S;
		static int LCMP;
		static int FCMPL;
		static int FCMPG;
		static int DCMPL;
		static int DCMPG;
		static int IFEQ;
		static int IFNE;
		static int IFLT;
		static int IFGE;
		static int IFGT;
		static int IFLE;
		static int IF_ICMPEQ;
		static int IF_ICMPNE;
		static int IF_ICMPLT;
		static int IF_ICMPGE;
		static int IF_ICMPGT;
		static int IF_ICMPLE;
		static int IF_ACMPEQ;
		static int IF_ACMPNE;
		static int GOTO;
		static int JSR;
		static int RET;
		static int TABLESWITCH;
		static int LOOKUPSWITCH;
		static int IRETURN;
		static int LRETURN;
		static int FRETURN;
		static int DRETURN;
		static int ARETURN;
		static int RETURN;
		static int GETSTATIC;
		static int PUTSTATIC;
		static int GETFIELD;
		static int PUTFIELD;
		static int INVOKEVIRTUAL;
		static int INVOKESPECIAL;
		static int INVOKESTATIC;
		static int INVOKEINTERFACE;
		static int INVOKEDYNAMIC;
		static int NEW;
		static int NEWARRAY;
		static int ANEWARRAY;
		static int ARRAYLENGTH;
		static int ATHROW;
		static int CHECKCAST;
		static int INSTANCEOF;
		static int MONITORENTER;
		static int MONITOREXIT;
		static int WIDE;
		static int MULTIANEWARRAY;
		static int IFNULL;
		static int IFNONNULL;
		static int GOTO_W;
		static int JSR_W;
		static int BREAKPOINT;
		static int IMPDEP1;
		static int IMPDEP2;
		int address;

		static void __ClassInit();
		Instruction();
		static Pointer<Instruction> read(Pointer<ByteInputStream> in, Pointer<ConstantPool> cp);
		virtual void addLabel(int address, Pointer<JavaRawArray<bool>> labels);
		virtual void detailedDump(Pointer<IndentedOutputStream> stream);
		virtual bool fallsThrough();
		virtual int getIndex();
		virtual int getStackDepthChange() = 0;
		virtual int getTargetAddress(int index);
		virtual int getTargetCount();
		virtual bool isXStore();
		virtual int length();
		virtual void oneLineDump(Pointer<IndentedOutputStream> stream);
		virtual void setAddress(int address);
	};

}
